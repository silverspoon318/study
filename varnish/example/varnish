#! /bin/sh
#
# varnish Control the Varnish Cache
#
# chkconfig: - 90 10
# description: Varnish is a high-perfomance HTTP accelerator
# processname: varnishd
# config: /etc/sysconfig/varnish
# pidfile: /var/run/varnishd.pid

### BEGIN INIT INFO
# Provides: varnish
# Required-Start: $network $local_fs $remote_fs
# Required-Stop: $network $local_fs $remote_fs
# Default-Start:
# Default-Stop:
# Should-Start: $syslog
# Short-Description: start and stop varnishd
# Description: Varnish is a high-perfomance HTTP accelerator
### END INIT INFO

# Source function library.
. /etc/init.d/functions

retval=0
pidfile=/var/run/$1.pid

exec="/usr/sbin/varnishd"
reload_exec="/usr/sbin/varnish_reload_vcl $1"
prog="varnishd"
config="/etc/sysconfig/varnish"
lockfile="/var/lock/subsys/varnish"

# Include varnish defaults
[ -e /etc/sysconfig/varnish ] && . /etc/sysconfig/varnish


start() {

        if [ ! -x $exec ]
        then
                echo $exec not found
                exit 5
        fi

        if [ ! -f $config ]
        then
                echo $config not found
                exit 6
        fi
        echo -n "Starting Varnish Cache: "

        # Open files (usually 1024, which is way too small for varnish)
        ulimit -n ${NFILES:-131072}

        # Varnish wants to lock shared memory log in memory.
        ulimit -l ${MEMLOCK:-82000}

        # Maximum number of threads (default in CentOS is 1024, which
        # is often too small for varnish)
        ulimit -u ${NPROCS:-unlimited}

        # If defined, set maximum core size.
        if [ -n "${DAEMON_COREFILE_LIMIT}" ]
        then
            ulimit -c ${DAEMON_COREFILE_LIMIT}
fi

# $DAEMON_OPTS is set in /etc/sysconfig/varnish. At least, one
# has to set up a backend, or /tmp will be used, which is a bad idea.
if [ "$DAEMON_OPTS" = "" ]; then
  echo "\$DAEMON_OPTS empty."
  echo -n "Please put configuration options in $config"
  return 6
else
if [ "$1" = "notice" ]; then
  # Varnish always gives output on STDOUT
  daemon --pidfile $pidfile  $exec -P $pidfile "$DAEMON_OPTS" > /dev/null 2>&1
  retval=$?
elif [ "$1" = "endingpopup" ]; then
  echo $1
  daemon --pidfile $pidfile  $exec -P $pidfile "$DAEMON_OPTS2" > /dev/null 2>&1
  #rm -f $pidfile
  #daemon --pidfile $pidfile  $exec -P $pidfile "$DAEMON_OPTS2"
  retval=$?
elif [ "$1" = "udw-v2" ]; then
  echo $1
  daemon --pidfile $pidfile  $exec -P $pidfile "$DAEMON_OPTS3" > /dev/null 2>&1
  retval=$?
elif [ "$1" = "notice-ext" ]; then
  echo $1
  daemon --pidfile $pidfile  $exec -P $pidfile "$DAEMON_OPTS4" > /dev/null 2>&1
  retval=$?
fi

if [ $retval -eq 0 ]
then
  touch $lockfile
  echo_success
  echo
else
  echo_failure
  echo
fi
return $retval
fi
}

stop() {
echo -n "Stopping Varnish Cache: "
killproc -p $pidfile $prog
retval=$?
echo
[ $retval -eq 0 ] && rm -f $lockfile
return $retval
}

restart() {
stop $1
start $1
}
reload() {
        if [ "$RELOAD_VCL" = "1" ]
        then
                $reload_exec
        else
                force_reload
        fi
}

force_reload() {
        restart
}

rh_status() {
        echo $pidfile
        status -p $pidfile $prog
}

rh_status_q() {
        rh_status $1 >/dev/null 2>&1
}

configtest() {
    if [ -f "$VARNISH_VCL_CONF" ]; then
        $exec -f "$VARNISH_VCL_CONF" -C -n /tmp > /dev/null && echo "Syntax ok"
    else
        echo "VARNISH_VCL_CONF is  unset or does not point to a file"
    fi
}

# See how we were called.
case "$2" in
        start)
                rh_status_q  $1 && exit 0
                $2 $1
                ;;
        stop)
                rh_status_q || exit 0
                $2
                ;;
        restart)
                $2 $1
                ;;
        reload)
                rh_status_q || exit 7
                $2
                ;;
        force-reload)
                force_reload
                ;;
        status)
                rh_status
                ;;
        condrestart|try-restart)
                rh_status_q || exit 0
                restart
                ;;
        configtest)
                configtest
                ;;
        *)
        echo "Usage: $0 {notice|endingpopup|udw-v2|notice-ext} {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"

        exit 2
esac
exit $?
